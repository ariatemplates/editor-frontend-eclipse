var prelude = require('prelude-ls');

var oop = require('oop');

var SessionManager = require('session').SessionManager;
var Code = require('code').Code;




var ArrayFactory = {
	factory: function(input) {
		if (prelude.isType('Array', input)) {
			return input;
		} else {
			return [input];
		}
	}
};



var ModeInput = new oop.Class({
	name: "Mode Input",

	constructor: function(input) {
		oop.processProperties(this, input, {
			properties: [
				{names: ['names', 'name', 'keys', 'key'], ctor: ArrayFactory, required: true},
				{names: ['mode', 'module'], required: true}
			]
		});
	}
});



var SessionInit = new oop.Class({
	name: "Session Init",

	constructor: function(input) {
		oop.processProperties(this, input, {
			properties: [
				{names: ['mode', 'lang', 'language'], required: true},
				{names: ['source', 'src', 'text', 'input', 'content']}
			]
		});
	}
});



var Request = new oop.Class({
	name: "Mode Request",

	constructor: function(input) {
		oop.processProperties(this, input, {
			properties: [
				{names: ['id', 'guid', 'key', 'session'], required: true},
				{names: ['service', 'svc', 'method', 'member'], required: true},
				{names: ['arg', 'args', 'argument', 'arguments'], default: {}}
			]
		});
	}
});




var ModeManager = new oop.Class({
	name: "Mode Manager",

	constructor: function(input) {
		this.modes = {};
		this.sessions = new SessionManager();
	},

	prototype: {
		/***********************************************************************
		 * Modes management
		 **********************************************************************/

		add: function(input) {
			var modeInputs = ArrayFactory.factory(input);

			for (var i = 0; i < modeInputs.length; i++) {
				var modeInput = ModeInput.factory(modeInputs[i]);

				var names = modeInput.names;
				for (var j = 0; j < names.length; j++) {
					this.modes[names[j]] = modeInput.mode;
				}
			}
		},

		exec: function(input) {
			var request = Request.factory(input);

			var data = this.getSessionData(request.id);

			return this.modes[data.mode][input.svc](data.code, request.arg);
		},

		/***********************************************************************
		 * Session management
		 **********************************************************************/

		/**
		 * Inits a new session.
		 *
		 * A session is used to manage an instance of a source code on the client side: basically a whole program, a file.
		 *
		 * @todo Maybe allow to pass initial data, like the source
		 */
		init: function(input) {
			var initInput = SessionInit.factory(input);

			// mode ------------------------------------------------------------

			var mode = initInput.mode;

			if (!(mode in this.modes)) {
				throw {
					msg: 'Unavailable mode',
					mode: mode,
					modes: this.modes
				}
			}

			// source ----------------------------------------------------------

			var code = this.modes[mode].create(initInput.source);

			// Initialization --------------------------------------------------

			var id = this.sessions.init({
				code: code,
				mode: mode
			});

			// Response --------------------------------------------------------

			return {
				guid: id
			};
		},

		getSessionData: function(id) {
			var data = this.sessions.get(id);

			if (data == null) {
				throw {
					msg: 'Invalid ID (no data)',
					id: id
				};
			}

			return data;
		}
	}
});



exports.ModeManager = ModeManager;
