var util = require('util');

var prelude = require('prelude-ls');

var oop = require('std/oop');





var Logger = oop.Class({
	name: 'Logger',

	init: function() {
		this.consoleWidth = 80;
	},

	methods: {

		/***********************************************************************
		 * Printing
		 **********************************************************************/

		/**
		 * Prints the given content to the console.
		 */
		log: console.log,

		/**
		 * Prints a separator line.
		 */
		separator: function() {
			this.log(prelude.Str.repeat(this.consoleWidth, '-'));
		},



		/***********************************************************************
		 * Formatting
		 **********************************************************************/

		stringify: function(data) {
			return util.inspect(data, {
				colors: true,
				depth: null,
				showHidden: false
			});
		},

		/**
		 * Simply puts filling characters after any input string, without going further than the given limit which is the total number of characters on the line.
		 */
		pad: function(input, width, char) {
			input = input + "";
			char == null && (char = ' ');
			char = char + "";

			var padding = prelude.Str.repeat(width - input.length, char);

			return input + padding;
		},



		/***********************************************************************
		 * Specific printing (with specific formatting)
		 **********************************************************************/

		/**
		 * Prints the AST.
		 */
		ast: function(it) {
			this.log(this.stringify(it));
		},

		/**
		 * Prints an exception.
		 */
		exception: function(exception) {
			var name = exception.name;
			var offset = exception.offset;
			var line = exception.line;
			var column = exception.column;
			var message = exception.message;
			var found = exception.found;
			var expected = exception.expected;

			this.log("" +
				name + " at L" + line + ", C" + column + " (" + offset + "): " + message + "\n" +
				"\t- found: " + found + "\n" +
				"\t- expected: " + expected
			);
		},

		/**
		 * Prints a source code.
		 *
		 * @todo For column display:
		 * - handle tabs, which are 1 character long but 4 spaces wide
		 * - display other vertical digits
		 * - display the exact number of columns, not the one rouded up to the nearest ten
		 * - fix the first column ,to make it start a 1 instead of 0
		 * @fixme Pad the line numbers the other side (not right but left)
		 */
		source: function(source) {
			// Lines display ---------------------------------------------------

			var lines = prelude.lines(source);

			// Gets the maximum width a line number can have: this is related to the number of lines, and to the number of digits of the latter
			var maxNumberWidth = ("" + lines.length).length;
			for (var index = 0, length = lines.length; index < length; index++) {
				var line = lines[index];
				var lineNumber = index + 1;
				var paddedLineNumber = this.pad(lineNumber, maxNumberWidth);

				var fullLine = paddedLineNumber + " " + line;

				this.log(fullLine);
			}

			// Column numbers display ------------------------------------------

			var digitsLine = "0123456789";
			var sortedLines = prelude.sortBy(function(line) {
				return line.length;
			}, lines);
			var longestLine = sortedLines.reverse()[0];
			var maxlength = longestLine.length;
			// The digits line must be repeated a sufficient number of times to cover the longest line.
			// In addition, we want to end by a full digits line, even if it goes over the longest line.
			var numberOfDigitsLines = Math.floor(maxlength / digitsLine.length) + 1;
			var fullDigitsLine = prelude.Str.repeat(numberOfDigitsLines, digitsLine);
			// TODO Use padding on left when implemented
			var padding = prelude.Str.repeat(maxNumberWidth, ' ');

			var columnLine = padding + " " + fullDigitsLine;

			this.log(columnLine);
		}
	}
});



exports.Logger = Logger;
