var fs = require('fs');
var path = require('path');

var prelude = require('prelude-ls');

var Logger = require('./logger').Logger;



var basePath = path.dirname(module.parent.filename);



function test(spec) {
	// Imports -----------------------------------------------------------------

	// Reads the file containing the data used for tests from the given path, relative to the path of the module which launched the test
	var source = spec.source;

	// Requires the parser defined at the same level of the module which launched the test
	var parserPath = spec.parserPath;
	parserPath == null && (parserPath = '.');
	var parser = require(basePath + "/" + parserPath);

	var logger = new Logger();

	// Logging -----------------------------------------------------------------

	// Tries to log the AST or its chosen representation
	// In case of failure, displays the error and the related source code (if not too big)
	try {
		var ast = parser.parse(source);
		var output;

		var loggingMode = spec.loggingMode;
		if (loggingMode === 'simplified') {
			output = ast.simplify();
		} else if (loggingMode === 'simpletree') {
			output = ast.simpleTree();
		} else {
			// `raw` normally
			output = ast;
		}

		logger.ast(output);

		// Some checkings ------------------------------------------------------

		console.log();

		// Coverage

		var reports = ast.checkCoverage();

		if (reports == null || reports.length === 0) {
			console.log("The graph covers the whole source range...");
			// var leaves = ast.leaves();
			// for (var i = 0, length = leaves.length; i < length; i++) {
			// 	var leaf = leaves[i];
			// 	console.log(leaf.location.start.index + "->" + leaf.location.end.index);
			// }
		} else {
			console.log("The graph doesn't cover the whole source range!");
			logger.log(logger.stringify(reports));
		}

	} catch (exception) {
		if (prelude.isType('Error', exception)) {
			console.log(exception.stack);
		} else {
			logger.exception(exception);

			if (source.length < spec.maxSourceLength) {
				logger.separator();
				logger.source(source);
				logger.separator();
			}
		}
	}
};



module.exports = test;
