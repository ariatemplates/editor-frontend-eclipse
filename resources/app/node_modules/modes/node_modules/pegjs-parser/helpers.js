var prelude = require('prelude-ls');

var oop = require('oop');

var Node = require('node').Node;



function arrayFromSequence(sequence, index) {
	var result = [];
	for (var i = 0, length = sequence.length; i < length; i++) {
		var part = sequence[i];
		result.push(part[index]);
	}
	return result;
};

function listFromSequence(head, rest) {
	// return [head].concat(arrayFromSequence(rest, 1));
	return [head].concat(prelude.flatten(rest));
}





var NodeInstancier = oop.Class({
	name: 'Node Instancier',

	constructor: function(language) {
		this.language = language != null ? language : null;
	},

	call: function(element, line, column, start, source) {
		return new Node({
			type: {
				language: this.language,
				element: element
			},
			location: {
				start: {
					line: line,
					column: column,
					index: start
				},
				end: {
					index: start + source.length
				}
			},
			source: source
		});
	}
});






exports.arrayFromSequence = arrayFromSequence;
exports.listFromSequence = listFromSequence;

exports.flatten = prelude.flatten;

exports.NodeInstancier = NodeInstancier;
