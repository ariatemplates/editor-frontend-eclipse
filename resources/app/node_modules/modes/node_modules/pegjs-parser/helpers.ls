require! {
# -------------------------------------------------------------------------- 3rd
	_: lodash
# ------------------------------------------------------------------------ Input
	'node'
}





arrayFromSequence = (sequence, index) -> [part[index] for part in sequence]
valueFromSequence = arrayFromSequence >> (.join '')
valueFromGuardedSequence = valueFromSequence _, 1
valueFromList = (list) -> if list isnt "" => list.0 else []

concatArrays = _.compact >> _.flatten

openingCurlyBracket = '{'
closingCurlyBracket = '}'

{Node} = node
class NodeInstancier
	(language) ~> @language = language ? null
	create: (args) -> Node.apply(null, [@language] ++ Array.prototype.slice.call(args))





exports <<< {
	arrayFromSequence
	valueFromSequence
	valueFromGuardedSequence
	valueFromList
	concatArrays

	openingCurlyBracket
	closingCurlyBracket

	NodeInstancier
}
