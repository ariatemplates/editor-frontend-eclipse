var oop = require('oop');

var prelude = require('prelude-ls');

var Style = require('./style').Style;



var Stylesheet = oop.Class({
	name: 'Stylesheet',

	constructor: function() {
		this.styles = {};
		this['default'] = undefined;
	},

	prototype: {
		add: function(input) {
			var spec = oop.processProperties({}, input, {
				properties: [
					{names: ['style'], ctor: Style, mixed: true},
					{names: ['id', 'key']}
				]
			});

			if (spec.id == null) {
				this['default'] = spec.style;
			} else {
				this.styles[spec.id] = spec.style;
			}

			return spec.style;
		},

		/***********************************************************************
		 * Serialization
		 **********************************************************************/

		serializeColor: function(color) {
			return color && {
				r: color.r,
				g: color.g,
				b: color.b
			};
		},

		serializeStyle: function(style) {
			var font = style.font || {};
			return prelude.Obj.reject(function(arg) {return arg === undefined}, {
				color: this.serializeColor(style.color),
				bgcolor: this.serializeColor(style.background),
				font: font.family,
				height: font.height,
				bold: font.bold,
				italic: font.italic,
				strike: font.strike,
				underline: font.underline
			});
		},

		serializeStyleShort: function(style) {
			var font = style.font || {};
			return prelude.Obj.reject(function(arg) {return arg === undefined}, {
				c: this.serializeColor(style.color),
				bg: this.serializeColor(style.background),
				f: font.family,
				h: font.height,
				b: font.bold,
				i: font.italic,
				s: font.strike,
				u: font.underline
			});
		},

		serialize: function() {
			var styles = {};
			for (var key in this.styles) {
				styles[key] = this.serializeStyle(this.styles[key]);
			}

			return {
				'default': this.serializeStyle(this['default']),
				styles: styles
			};
		}
	}
});



function factory(input) {
	var spec = oop.processProperties({}, input, {
		properties: [
			{names: ['default', 'def']},
			{names: ['styles'], default: {}}
		]
	});

	var stylesheet = new Stylesheet();

	// Default -----------------------------------------------------------------

	if (spec.default != null) {
		stylesheet.add(spec.default);
	}

	// Styles ------------------------------------------------------------------

	for (var id in spec.styles) {
		stylesheet.add({
			id: id,
			style: spec.styles[id]
		});
	}

	return stylesheet;
}



exports.Stylesheet = Stylesheet;
exports.factory = factory;
