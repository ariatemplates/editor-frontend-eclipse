var prelude = require('prelude-ls');

var oop = require('std/oop');

var Style = require('./style').Style;



var Stylesheet = oop.Class({
	name: 'Stylesheet',

	desc: 'A stylesheet is a set of styles, each of them associated to a unique id. A stylesheet also contains a specific style which is the default style: if ever you try to get the style for an id which doesn\'t exist, the default style will be returned.',

	constructor: function() {
		this.styles = {};
		this.default = undefined;
	},

	methods: {
		add: {
			input: {
				properties: [
					{name: 'style', type: Style, mixed: true},
					{names: ['id', 'key']}
				]
			},

			process: function(spec) {
				if (spec.id == null) {
					this['default'] = spec.style;
				} else {
					this.styles[spec.id] = spec.style;
				}
			},

			output: 'style'
		},

		/**
		 * Returns the list of defined styles.
		 */
		stylesNames: function() {
			return Object.keys(this.styles);
		},

		/***********************************************************************
		 * Serialization
		 **********************************************************************/

		/**
		 * @todo Use the class $token as a master style
		 */
		css: function() {
			var ruleSets = [];
			ruleSets.push(".editor-highlight-token {" + this.default.css().join(';') + "}");
			for (var selector in this.styles) {
				var style = this.styles[selector];
				var declarations = style.css();
				ruleSets.push('.editor-highlight-' + selector + ' {' + declarations.join(';') + '}');
			}
			return ruleSets.join('\n');
		},

		serializeColor: function(color) {
			return color && {
				r: color.r,
				g: color.g,
				b: color.b
			};
		},

		serializeStyle: function(style) {
			var font = style.font || {};
			return prelude.Obj.reject(function(arg) {return arg === undefined}, {
				color: this.serializeColor(style.color),
				bgcolor: this.serializeColor(style.background),
				font: font.family,
				height: font.height,
				bold: font.bold,
				italic: font.italic,
				strike: font.strike,
				underline: font.underline
			});
		},

		serializeStyleShort: function(style) {
			var font = style.font || {};
			return prelude.Obj.reject(function(arg) {return arg === undefined}, {
				c: this.serializeColor(style.color),
				bg: this.serializeColor(style.background),
				f: font.family,
				h: font.height,
				b: font.bold,
				i: font.italic,
				s: font.strike,
				u: font.underline
			});
		},

		serialize: function() {
			var styles = {};
			for (var key in this.styles) {
				styles[key] = this.serializeStyle(this.styles[key]);
			}

			return {
				'default': this.serializeStyle(this['default']),
				styles: styles
			};
		}
	}
});





var factory = oop.methodFactory({
	input: {
		properties: [
			{names: ['default', 'def']},
			{names: ['styles'], default: {}}
		]
	},

	process: function(spec) {
		var stylesheet = new Stylesheet();

		// Default -----------------------------------------------------------------

		if (spec.default != null) {
			stylesheet.add(spec.default);
		}

		// Styles ------------------------------------------------------------------

		for (var id in spec.styles) {
			stylesheet.add({
				id: id,
				style: spec.styles[id]
			});
		}

		return stylesheet;
	}
});



exports.Stylesheet = Stylesheet;
exports.factory = factory;
