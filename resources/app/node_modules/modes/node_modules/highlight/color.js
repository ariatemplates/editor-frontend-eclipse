var oop = require('oop');

var prelude = require('prelude-ls');

/** @todo Should go in a STD Math lib */
function ensureRange(min, max, value) {
	var result = value;
	if (value < min) result = min;
	else if (value > max) result = max;
	return result;
}





function postprocessColor(value) {
	return ensureRange(0, 255, value);
}



var Color = oop.Class({
	name: 'Color',

	schema: {
		inputToSpec: {
			'String': function(input) {
				var color = Color.defaults[input];

				if (color != null) return color;
				throw {
					msg: 'No default color under this name',
					name: input
				};
			},
			'Number': function(input) {
				return Color.greyScale(input);
			}
		},
		properties: [
			{names: ['r', 'red'], type: oop.types.Number, postprocess: postprocessColor},
			{names: ['g', 'green'], type: oop.types.Number, postprocess: postprocessColor},
			{names: ['b', 'blue'], type: oop.types.Number, postprocess: postprocessColor}
		]
	},

 	factories: {
 		rgb: {
 			args: {r: 0, g: 1, b: 2}
 		},
 		greyScale: {
 			args: {r: 0, g: 0, b: 0}
 		},
 		redScale: {
 			args: {r: 0},
 			values: {g: 0, b: 0}
 		},
 		blueScale: {
 			args: {b: 0},
 			values: {r: 0, g: 0}
 		},
 		greenScale: {
 			args: {g: 0},
 			values: {r: 0, b: 0}
 		}
 	}
});



oop.addStatics(Color, {
	defaults: {
		'black': Color.greyScale(0),
		'white': Color.greyScale(255),
		'grey': Color.greyScale(128),
		'red': Color.redScale(255),
		'green': Color.greenScale(255),
		'blue': Color.blueScale(255)
	}
});





exports.Color = Color;
