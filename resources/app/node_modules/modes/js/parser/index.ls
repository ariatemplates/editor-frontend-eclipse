require! {
	prelude: 'prelude-ls'

	esprima

	reflect
	'./builder'

	node
}
{Node} = node



class Parser
	~>

	# /**
	#  * Returns a modified AST, converted to a graph.
	#  *
	#  * The model design is still a work in progress.
	#  */
	# ::_parse = reflect.parse _, {builder}

	# /**
	#  * Returns an unmodified AST, compliant to the Parser API Mozilla specification.
	#  *
	#  * This function is partially applied and activates all options.
	#  */
	# ::parse = esprima.parse _, {
	# 	+loc
	# 	+range
	# 	+raw
	# 	+tokens
	# 	+comment
	# 	+tolerant
	# }

	parse: -> @_esprimaParse ...

	_reflectParse: -> ...

	_esprimaParse: (input, rule) ->
		ast = esprima.parse input, {
			+loc
			+range
			+raw
			+tokens
			+comment
			+tolerant
		}

		# FIXME Bug inside
		graph = @_ast-to-graph ast
		graph

	_ast-to-graph: (ast) -> @_esprima-to-node ast

	/**
	 * @fixme Null fields in the original node are considered to be children. In this case, we can't add it, or with a specila empty node telling there nothing? Or simply drop the child, even if the property index is then lost.
	 For now they are completely removed.
	 */
	_esprima-to-node: (node) ->
		[children, properties] = node
		|> prelude.obj-to-pairs
		|> prelude.map -> {key: it.0, value: it.1}
		|> prelude.filter (.key not in <[ type loc range comments tokens errors ]>)
		|> prelude.partition ->
			{value} = it
			if not value? => return true
			if typeof! value is 'Array'
				if value.length is 0 => return true
				else value .= 0
			value.type? and value.loc?

		children = prelude.filter (.value?), children

		spec = {
			children, properties
		}

		node = Node 'js', node.type, node.loc.start.line, node.loc.start.column, node.range.0, {(node.loc.end).line,(node.loc.end).column, index: node.range.1}
		for child in children
			switch typeof! child.value
			| 'Array' => node.addList child.key, [@_esprima-to-node item for item in child.value]
			| 'Object' => node.add child.key, @_esprima-to-node child.value
		for property in properties => node.set property.key, property.value

		node







module.exports = Parser!
