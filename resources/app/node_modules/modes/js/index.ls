require! {
# -------------------------------------------------------------------------- 3rd
	_: lodash

	esprima
	jshint
	beautify: 'js-beautify'
# -------------------------------------------------------------------------- App
	mode

	outlineNode: './outline/outline_visitors'
	'./parser'
	'./outliner'
	'./highlighter'
	'./folding'
}
# ------------------------------------------------------------------ Extractions
{Mode} = mode
jshint .= JSHINT



class JS extends Mode
	~> super parser

	############################################################################
	# Delegated (more or less)
	############################################################################

	# parse: ({source, options = {}}) -> parser.parse source, options.rule
	outline: ({source}) -> outliner.outline esprima.parse source, {+raw, +tolerant}
	fold: ({source}) -> folding.fold esprima.parse source, {+loc, +comment, +tolerant}

	highlight: ({source}) -> highlighter.highlight esprima.parse source, {+tokens, +range, +comment, +tolerant}
	stylesheet: -> stylesheet: require './stylesheet'
	rangeToLoc = -> {start: it.0, end: it.1}
	tokenize: ({source}) ->
		{tokens ? [], comments ? []} = esprima.parse source, {+tokens, +range, +comment, +tolerant}

		tokens = [{token.type} <<< rangeToLoc token.range for token in tokens]
		comments = [{type: 'Comment'} <<< rangeToLoc comment.range for comment in comments]

		{tokens: _.sortBy (tokens ++ comments), (.start)}

	############################################################################
	# Session
	# NOT IMPLEMENTED
	############################################################################

	@sessionId = 0
	@sessions = {}

	init: ({contentId, source}) ~>
		sessionId = JS.sessionId++

		session = {
			contentId
			sessionId
		}

		JS.sessions[sessionId] = {
			models: {
				source
				ast: @parse source
			}
		} <<< session

		session

	############################################################################
	# Formatting
	# WORK IN PROGRESS
	############################################################################

	format: ({source, options ? {}}) ~>
		beautified = beautify source

		getRange = -> {start: 0, end: it.length}
		result = {
			source: beautified
			ranges:
				input:
					passed: getRange source
					actual: getRange source
				output: getRange beautified
		}

		if options.outline? => result.outline = @outline {source: beautified, options: options.outline}
		if options.highlight? => result.highlight = @highlight {source: beautified}
		if options.fold? => result.fold = @fold {source: beautified}
		if options.validate? => result.validate = @validate {source: beautified}

		result

	############################################################################
	# Validation
	# WORK IN PROGRESS
	############################################################################

	validate: ({source}) ->
		passed = jshint source
		if passed => {} else jshint.data!

	############################################################################
	# Completion
	# NOT IMPLEMENTED
	############################################################################

	/**
	 * Returns completion description for the current selection.
	 */
	complete: ({range, options}) -> ...




module.exports = JS!
