require! {
# -------------------------------------------------------------------------- 3rd
	_: lodash

	esprima
	jshint
	beautify: 'js-beautify'
# ---------------------------------------------------------------------- Own STD
	'std/string'
	'std/io'
	'std/opt/cache'
# -------------------------------------------------------------------------- App
	mode

	outlineNode: './outline/outline_visitors'
	'./parser'
	'./outliner'
	'./highlighter'
	'./folding'
}
# ------------------------------------------------------------------ Extractions
{Cache} = cache
{Mode} = mode
jshint .= JSHINT



class JS extends Mode
	~>
		super parser

		# Stylesheet -----------------------------------------------------------

		@stylesheet-path = "#__dirname/stylesheet.ls"
		@stylesheet-date = io.modificationDate @stylesheet-path
		@stylesheet-cache = Cache {
			compute: @stylesheet-get
			isObsolete: ~>
				oldDate = @stylesheet-date
				@stylesheet-date = io.modificationDate @stylesheet-path
				@stylesheet-date > oldDate
		}

	############################################################################
	# Delegated (more or less)
	############################################################################

	# parse: ({source, options = {}}) -> parser.parse source, options.rule
	outline: ({source}) -> outliner.outline esprima.parse source, {+raw, +tolerant}
	fold: ({source}) -> folding.fold esprima.parse source, {+loc, +range, +comment, +tolerant}



	############################################################################
	# Highlighting
	#
	# TODO The caching system is just a kind of PoC, in the future it should use a more standard system, and check the cache is valid based on something else (date, flag(s), deep comparison, ...)
	############################################################################

	highlight: ({source}) -> highlighter.highlight esprima.parse source, {+tokens, +range, +comment, +tolerant}


	stylesheet-get: ~> {stylesheet: io.loadLscJSON io.read @stylesheet-path}
	stylesheet: (options) ->
		{checkCache, sendIfObsolete} = options ? {}
		if not checkCache => return @stylesheet-get!
		(@stylesheet-cache.check sendIfObsolete){obsolete, stylesheet:value}

	tokenize: ({guid, source}:arg) ->
		ast = esprima.parse source, {+tokens, +range, +comment, +tolerant}
		# @_updateSession arg
		highlighter.tokenize ast, arg

	############################################################################
	# Formatting
	# WORK IN PROGRESS
	############################################################################

	format: ({source, options ? {}}) ~>
		beautified = beautify source

		getRange = -> {start: 0, end: it.length}
		result = {
			source: beautified
			ranges:
				input:
					passed: getRange source
					actual: getRange source
				output: getRange beautified
		}

		if options.outline? => result.outline = @outline {source: beautified, options: options.outline}
		if options.highlight? => result.highlight = @highlight {source: beautified}
		if options.fold? => result.fold = @fold {source: beautified}
		if options.validate? => result.validate = @validate {source: beautified}

		result

	############################################################################
	# Validation
	# WORK IN PROGRESS
	############################################################################

	validate: ({source}) ->
		passed = jshint source
		if passed => {} else jshint.data!

	############################################################################
	# Completion
	# NOT IMPLEMENTED
	############################################################################

	/**
	 * Returns completion description for the current selection.
	 */
	complete: ({range, options}) -> ...




module.exports = JS!
