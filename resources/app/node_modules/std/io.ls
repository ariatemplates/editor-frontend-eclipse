require! {
# -------------------------------------------------------------------------- STD
	fs
# ---------------------------------------------------------------------- Own STD
	'std/string'
	'std/conf'
}



class IO
	(spec = {}) ~> @conf = conf.io with spec

	read: (path, encoding = @conf.encoding) -> fs.readFileSync path, encoding
	write: fs.writeFileSync

	serialize: (data, indent = @conf.indent) -> JSON.stringify data, null indent
	serializeJSON: ::serialize

	/**
	 * @fixme Shouldn't `extension` be used???
	 */
	readJSON: (path, extension) ->
		# if @conf.useReadJSONDefaultExtension => if not extension? => path = "#path.json"
		# JSON.parse @read path
		if @conf.useReadJSONDefaultExtension => extension ?= ".json"
		extension ?= ''
		JSON.parse @read "#path#extension"

	persist: (path, data, extension = 'json') ~>
		if extension? => path = "#path.#extension"
		@write path, @serializeJSON data
	persistJSON: ::persist
	writeJSON: ::persistJSON



module.exports = new IO!
